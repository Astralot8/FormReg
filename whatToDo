Создайте новый репозиторий на github в своем аккаунте и загрузите туда проект из контрольной работы №8 (макет с формой регистрации).
Добавьте новый файл в корень проекта readme.md (такой файл используется для описания проекта) и напишите в этом файле любые несколько строк о вашем проекте. Создайте коммит с выполненными изменениями, и напишите “added readme file” (Перевод сообщения: “Добавлен файл «прочти меня»”).
Добавьте в корень проекта файл config.js с любым кодом внутри. Сделайте так, чтобы git его и игнорировал и выполните коммит таких изменений с сообщением “added gitignore” (Перевод сообщения: “Добавлен gitignore”).
Создайте из основной ветки ветку dev-1 и перейдите в нее. В этой ветке немного измените цвета сайта. Добавьте в корень проекта любой файл, к примеру, doc1.docx и зафиксируйте изменения коммитом. Затем измените этот новый коммит, добавив в него еще один файл doc2.docx и новое сообщение комментария. Сделайте пуш на удаленный репозиторий.
Из ветки dev-1 создайте ветку dev-2. В ней измените ваш файл JS (к примеру, добавьте комментарий или вывод какого-нибудь сообщения в консоль). Сделайте пуш на удаленный репозиторий.
После этого вернитесь в ветку dev-1 и слейте туда изменения из ветки dev-2.
Далее перейдите в ветку master и слейте туда ветку dev-1. Сделайте пуш на удаленный репозиторий.
Безвозвратно удалите ветку dev-2.
Проанализируйте историю проекта и результаты выполнения команды git log минимум с тремя различными флагами. Сделайте скриншоты, их нужно будет заархивировать и приложить при сдаче работы.
Добавьте несколько строк в любой файл и зафиксируйте их коммитом. Затем отмените эти изменения используя git. Также сделайте скриншоты.
После этого сделайте свой репозиторий приватным и в настройках удаленного репозитория добавьте нового участника проекта, аккаунт вашего наставника. Ссылка на гитхаб наставника находится рядом с его именем и фотографией у вас в курсе (см. плашку "Ваш наставник" выше).
В комментарии к ДЗ укажите ссылку на приглашение вашему наставнику в репозиторий remote_homework. Кроме того, обязательно прикрепите к ДЗ архив со скриншотами.

HW13
Используя другую папку, склонируйте проект себе еще раз, чтобы имитировать другого разработчика.
Создайте новую ветку mytask на основе ветки master. Сделайте новый коммит в этой ветке (mytask), в котором будет удаление файла js.
Вернитесь в ветку master и сделайте новый коммит, в котором будет изменение кода в файле js, но не удаляйте этот файл.
Выполните слияние ветки mytask в master. После того, как возникнет конфликт - проанализируйте его и отмените слияние.
Затем начните слияние ветки заново, но используйте команду для принятия изменений из master, а не из mytask. По итогу слияния файл js не должен быть удален.
Сделайте еще 2 разных коммита в mytask с изменениями в файле css.
Перейдите в ветку master и сделайте изменения в файле css на 5 коммитов.
Перейдите в ветку mytask и выполните команду git rebase master.
Проанализируйте историю и сделайте скриншоты. Затем перейдите в master и слейте состояние ветки mytask в master.
Загрузите на github вашу ветку mytask
Теперь перейдите в папку, в которой вы работали в самом начале, выполните git fetch и убедитесь в том, что информация о новой ветке mytask теперь известна в git
Переключитесь на новую ветку так, чтобы она была создана локально.
В конце файла js добавьте вывод в консоль любого сообщения и сделайте push этих изменений в удаленную ветку mytask.
Вернитесь в папку нового разработчика, откуда и была создана ветка mytask.
Также добавьте в конце файла js вывод в консоль, но уже другого сообщения.
Сделайте коммит и затем выполните git pull. Решите конфликт, оставив оба вывода в консоль, и загрузите итоговое состояние на github.
Создайте новую ветку mytasktest. Сделайте там 1 новый коммит. Загрузите её на гитхаб. Затем удалите её с удаленного репозитория и локально, чтобы от неё ничего не осталось. Сделайте скриншоты результатов.